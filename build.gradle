buildscript {
    // repositories for build script dependencies
    repositories {
        mavenLocal()
        maven {
            name "alimaven"
            url "https://maven.aliyun.com/nexus/content/groups/public/"
        }
//        maven {
//            url "https://plugins.gradle.org/m2/"
//        }
//        mavenCentral()
    }
    dependencies {
        classpath "org.ajoberstar.grgit:grgit-gradle:4.1.0"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.5.4"
    }
}

// git version
apply plugin: "org.ajoberstar.grgit"
int commits = grgit.log().size()
version = "${projectVersion}.${commits}"
if (!project.hasProperty("release")) {
    String branch = grgit.branch.current().name
    String prefix = branch.replace("/", "-")
    String abbreviatedId = grgit.head().abbreviatedId
    version = "${prefix}-${version}.${abbreviatedId}"
}
println("gitVersion=$version")

subprojects {
    // repositories for project dependencies
    repositories {
        if (!project.hasProperty("release")) {
            mavenLocal()
        }
        maven {
            name "alimaven"
            url "https://maven.aliyun.com/nexus/content/groups/public/"
        }
//        mavenCentral()
    }
    group("$projectGroup")
    version = rootProject.version

    apply plugin: 'java'
    java {
        withJavadocJar()
        withSourcesJar()
    }
    jar.doLast {
        println "jar: ${archiveFile.get()}"
    }
    test.doLast {
        println test.reports.html.entryPoint
    }

    configurations.all {
        // check for updates every build
        resolutionStrategy {
            cacheChangingModulesFor 0, 'seconds'
            cacheDynamicVersionsFor 0, 'seconds'
        }
    }
    configurations {
        all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}
